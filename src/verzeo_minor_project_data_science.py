# -*- coding: utf-8 -*-
"""Verzeo Minor Project - Data Science.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dr0CQv6tuQq2uGs9Ddj1T_53ukbaT73_

<center>
<h1><b>Prediction of Profit</b></h1>
<h3><b>Verzeo - Data Science - Minor Project</b></h3>
</center>

<b>Name: </b> Aashish Bansal
<br>
<b>Email: </b>aashish22bansal@gmail.com
<br>
<b>Program: </b>Data Science October
<br>
<b>Project Description: </b>Perform regression analysis to predict the profit of each the 50 startups mentioned in the dataset by taking all the input parameters(multi linear regression).
<br>
<b>Dataset Link: </b>https://raw.githubusercontent.com/arib168/data/main/50_Startups.csv

# Importing Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn

"""# Importing Dataset"""

file_path = "https://raw.githubusercontent.com/arib168/data/main/50_Startups.csv"

data=pd.read_csv(file_path)

data

"""# Basic Data Analysis

## Viewing the Data
"""

data.head()

data.tail()

"""## Numerical/Statistical analysis of the dataset"""

data.describe()

"""## Dimensions of dataset"""

print("Number of Rows in Dataset: {rows}".format(rows=data.shape[0]))
print("Number of Columns in Dataset: {cols}".format(cols=data.shape[1]))

"""## Duplicate Values
Here we are trying to check if there are repeated values in the dataset or not.
"""

print("Number of Dulplicate values: {duplicates}".format(duplicates=data.duplicated().sum()))

"""<b>Inference: </b>There are no duplicate values.

## Check for NULL values
Here, we will check if there are any mising values in the dataset or not.
"""

print("Number of Null values in Each Column:\n")
data.isnull().sum()

"""<b>Inference:</b> There are no null values in the dataset.

## Schema of dataset
"""

data.info()

"""# Exploratory Data Analysis

## Correlation matrix
First we will find the Correlation between the columns of the dataset.
"""

correlation = data.corr()

correlation

sns.heatmap(correlation, annot=True, cmap='hot')
plt.show()

"""<b>Inference:</b> Here we can see the direct correlation with profit from how it is shown in the heatmap of the correlation plot.

## Outliers detection in the target variable
"""

outliers = ['Profit']
plt.rcParams['figure.figsize'] = [8,8]
sns.boxplot(data=data[outliers], orient="v", palette="Set2" , width=0.7)
plt.title("Outliers Variable Distribution")
plt.ylabel("Profit Range")
plt.xlabel("Continuous Variable")
plt.show()

"""<b>Inference:</b> While looking at the boxplot we can see the outliers in the profit(target variable), but the amount of data is not much as we have been provided with a dataset which has just 50 entries. So, it wonâ€™t really create much negative impact.

## State-wise outliers detection

Checking the States in the dataset.
"""

data["State"].unique()

"""<b>Inference: </b>There are three unique States in the dataset."""

sns.boxplot(x='State', y='Profit', data=data)
plt.show()

"""<b>Inference:</b>

1. All outliers presented are in the State of New York.
2. The startups located in California we can see the maximum profits and maximum loss.
3. The startups located in Florida seen to make the highest profits.

## Histogram on Profit
"""

sns.distplot(data['Profit'], bins=5, kde=True)
plt.show()

"""<b>Inference:</b> The average profit (which is 100k) is the most frequent i.e. this should be in the category of distribution plot.

## Pair plot
"""

sns.pairplot(data)
plt.show()

"""<b>Inference:</b>

1. As we can see in the pair pot, Research and development are directly proportional to the investment that we can do.
2. The spending on marketing seems to be directly proportional with the profit even though there are outliers.
3. There is no relationship between the Administration and Profit.

# Individual Column Analysis using Correlation

## R&D vs Profit

Lets Analyse the relationship between Dependent variable with other independent variable...
"""

#Plot R&D vs Profit............
x1 = data.iloc[:, 0].values
y1 = data.iloc[:, -1].values
plt.scatter(x1, y1, color='Green', s=50)
plt.xlabel('R&D')
plt.ylabel('Profit')
plt.title('R&D vs Profit')
plt.show()

"""From the above plot we can able to visualize that R&D and Profit has positive correlation.

## Administration vs Profit
Lets Analyse the relationship between Administration and Profit
"""

x1 = data.iloc[:, 1].values
y1 = data.iloc[:, -1].values
plt.scatter(x1, y1, color='Red', s=50)
plt.xlabel('Administration')
plt.ylabel('Profit')
plt.title('Administration vs Profit')
plt.show()

"""From above plot - Zero correlation between Administration and Profit.

## Marketing Spend vs Profit
Lets Analyse the relationship between Marketing Spend and Profit
"""

#Plot Marketing Spend vs Profit
x1 = data.iloc[:, 2].values
y1 = data.iloc[:, -1].values
plt.scatter(x1, y1, color='Black', s=50)
plt.xlabel('Marketing Spend')
plt.ylabel('Profit')
plt.title('Marketing Spend vs Profit')
plt.show()

"""From above plot, there is a correlation between Marketing Spend and Profit.

## State vs Profit
Lets Analyse the relationship between Marketing State and Profit...
"""

#Plot State vs Profit
x1 = data.iloc[:, 3].values
y1 = data.iloc[:, -1].values
plt.scatter(x1, y1, color='Blue', s=50)
plt.xlabel('State')
plt.ylabel('Profit')
plt.title('State vs Profit')
plt.show()

"""Since state consists strings so it doesn't shows correlation so we can not know does it affects or not. So, let's try to convert it to integers and then analyse again."""

from numpy import array
from numpy import argmax
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder

# define example
new_data = data["State"]#['New York', 'California', 'Florida']
values = array(new_data)
print(values)

# integer encode
label_encoder = LabelEncoder()
integer_encoded = label_encoder.fit_transform(values)
print(integer_encoded)

# binary encode
onehot_encoder = OneHotEncoder(sparse=False)
integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)
onehot_encoded = onehot_encoder.fit_transform(integer_encoded)
print(onehot_encoded)

# invert first example
inverted = label_encoder.inverse_transform([argmax(onehot_encoded[0, :])])
print(inverted)

#Plot State vs Profit
x1 = integer_encoded
x1.shape

y1 = data.iloc[:, -1].values
y1

plt.scatter(x1, y1, color='Blue', s=50)
plt.xlabel('State')
plt.ylabel('Profit')
plt.title('State vs Profit')
plt.show()

"""Since state does not shows correlation so we can not know does it affects or not.

# Feature Engineering
"""

from sklearn.linear_model import LinearRegression

X = data[["R&D Spend", "Administration", "Marketing Spend", "State"]]

Y = data["Profit"]

X.head()

Y.head()

"""Since "X" contains "State" which has strings, so we can not fit the data into the model. So, we need to do feature Engineering and transform/encode the data to new form. It can be done by converting the given labels into some numbers."""

states = X["State"]

states

"""## One Host Encoding"""

temp_states = pd.get_dummies(states)

temp_states.head()

final_states = temp_states.iloc[:,0:3]

final_states.head()

"""# Replacing Old Data with New Data
 Replacing old data with new data that has catagorical data with new data values which we just created.

### Removing Old State column
"""

X = X.iloc[:,0:3]

X.head()

final_states.columns

"""### Add the Encoded Columns"""

X[["California","Florida","New York"]] = final_states

X.head()

"""# Splitting the Dataset into Training and Testing Data"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=42)

"""# Creating the Model"""

model = LinearRegression()

"""# Training the Model"""

model.fit(X_train,y_train)

"""# Predicting using the Model"""

y_pred=model.predict(X_test)

y_pred

"""# Model Evaluation"""

from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

r2Score = r2_score(y_pred, y_test)
print("R2 score of model is :" ,r2Score)

mse = mean_squared_error(y_pred, y_test)
print("Mean Squarred Error is :" ,mse)

rmse = np.sqrt(mean_squared_error(y_pred, y_test))
print("Root Mean Squarred Error is : ",rmse)

mae = mean_absolute_error(y_pred,y_test)
print("Mean Absolute Error is :" ,mae)

"""# Prediction Summary for Profits"""

model.coef_

print("Profit from R&D Spend: {RnDSpend}".format(RnDSpend = model.coef_[0]))
print("Profit from Administration: {Administration}".format(Administration = model.coef_[1]))
print("Profit from Marketing Spend: {MarketingSpend}".format(MarketingSpend = model.coef_[2]))
print("Profit from California: {California}".format(California = model.coef_[3]))
print("Profit from Florida: {Florida}".format(Florida = model.coef_[4]))
print("Profit from New York: {NewYork}".format(NewYork = model.coef_[5]))